//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Jerk.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class JerkTestsBase
    {
        protected abstract double CentimetersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double DecimetersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double FeetPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double InchesPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double KilometersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double KnotsPerHourSquaredInOneMeterPerSecondCubed { get; }
        protected abstract double KnotsPerMinuteSquaredInOneMeterPerSecondCubed { get; }
        protected abstract double KnotsPerSecondSquaredInOneMeterPerSecondCubed { get; }
        protected abstract double MetersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double MicrometersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double MillimetersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double NanometersPerSecondCubedInOneMeterPerSecondCubed { get; }
        protected abstract double StandardGravityPerSecondInOneMeterPerSecondCubed { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimetersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double FeetPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double InchesPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerHourSquaredTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerMinuteSquaredTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double MetersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double StandardGravityPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void MeterPerSecondCubedToJerkUnits()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            AssertEx.EqualTolerance(CentimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.CentimetersPerSecondCubed, CentimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.DecimetersPerSecondCubed, DecimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(FeetPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.FeetPerSecondCubed, FeetPerSecondCubedTolerance);
            AssertEx.EqualTolerance(InchesPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.InchesPerSecondCubed, InchesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.KilometersPerSecondCubed, KilometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(KnotsPerHourSquaredInOneMeterPerSecondCubed, meterpersecondcubed.KnotsPerHourSquared, KnotsPerHourSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerMinuteSquaredInOneMeterPerSecondCubed, meterpersecondcubed.KnotsPerMinuteSquared, KnotsPerMinuteSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerSecondSquaredInOneMeterPerSecondCubed, meterpersecondcubed.KnotsPerSecondSquared, KnotsPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.MicrometersPerSecondCubed, MicrometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.MillimetersPerSecondCubed, MillimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.NanometersPerSecondCubed, NanometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(StandardGravityPerSecondInOneMeterPerSecondCubed, meterpersecondcubed.StandardGravityPerSecond, StandardGravityPerSecondTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.CentimeterPerSecondCubed).CentimetersPerSecondCubed, CentimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.DecimeterPerSecondCubed).DecimetersPerSecondCubed, DecimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.FootPerSecondCubed).FeetPerSecondCubed, FeetPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.InchPerSecondCubed).InchesPerSecondCubed, InchesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.KilometerPerSecondCubed).KilometersPerSecondCubed, KilometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.KnotPerHourSquared).KnotsPerHourSquared, KnotsPerHourSquaredTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.KnotPerMinuteSquared).KnotsPerMinuteSquared, KnotsPerMinuteSquaredTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.KnotPerSecondSquared).KnotsPerSecondSquared, KnotsPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.MeterPerSecondCubed).MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.MicrometerPerSecondCubed).MicrometersPerSecondCubed, MicrometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.MillimeterPerSecondCubed).MillimetersPerSecondCubed, MillimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.NanometerPerSecondCubed).NanometersPerSecondCubed, NanometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.From(1, JerkUnit.StandardGravityPerSecond).StandardGravityPerSecond, StandardGravityPerSecondTolerance);
        }

        [Fact]
        public void As()
        {
            var meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            AssertEx.EqualTolerance(CentimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.CentimeterPerSecondCubed), CentimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.DecimeterPerSecondCubed), DecimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(FeetPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.FootPerSecondCubed), FeetPerSecondCubedTolerance);
            AssertEx.EqualTolerance(InchesPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.InchPerSecondCubed), InchesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.KilometerPerSecondCubed), KilometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(KnotsPerHourSquaredInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.KnotPerHourSquared), KnotsPerHourSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerMinuteSquaredInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.KnotPerMinuteSquared), KnotsPerMinuteSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerSecondSquaredInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.KnotPerSecondSquared), KnotsPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.MeterPerSecondCubed), MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.MicrometerPerSecondCubed), MicrometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.MillimeterPerSecondCubed), MillimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondCubedInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.NanometerPerSecondCubed), NanometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(StandardGravityPerSecondInOneMeterPerSecondCubed, meterpersecondcubed.As(JerkUnit.StandardGravityPerSecond), StandardGravityPerSecondTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);

            var centimeterpersecondcubedQuantity = meterpersecondcubed.ToUnit(JerkUnit.CentimeterPerSecondCubed);
            AssertEx.EqualTolerance(CentimetersPerSecondCubedInOneMeterPerSecondCubed, (double)centimeterpersecondcubedQuantity.Value, CentimetersPerSecondCubedTolerance);
            Assert.Equal(JerkUnit.CentimeterPerSecondCubed, centimeterpersecondcubedQuantity.Unit);

            var decimeterpersecondcubedQuantity = meterpersecondcubed.ToUnit(JerkUnit.DecimeterPerSecondCubed);
            AssertEx.EqualTolerance(DecimetersPerSecondCubedInOneMeterPerSecondCubed, (double)decimeterpersecondcubedQuantity.Value, DecimetersPerSecondCubedTolerance);
            Assert.Equal(JerkUnit.DecimeterPerSecondCubed, decimeterpersecondcubedQuantity.Unit);

            var footpersecondcubedQuantity = meterpersecondcubed.ToUnit(JerkUnit.FootPerSecondCubed);
            AssertEx.EqualTolerance(FeetPerSecondCubedInOneMeterPerSecondCubed, (double)footpersecondcubedQuantity.Value, FeetPerSecondCubedTolerance);
            Assert.Equal(JerkUnit.FootPerSecondCubed, footpersecondcubedQuantity.Unit);

            var inchpersecondcubedQuantity = meterpersecondcubed.ToUnit(JerkUnit.InchPerSecondCubed);
            AssertEx.EqualTolerance(InchesPerSecondCubedInOneMeterPerSecondCubed, (double)inchpersecondcubedQuantity.Value, InchesPerSecondCubedTolerance);
            Assert.Equal(JerkUnit.InchPerSecondCubed, inchpersecondcubedQuantity.Unit);

            var kilometerpersecondcubedQuantity = meterpersecondcubed.ToUnit(JerkUnit.KilometerPerSecondCubed);
            AssertEx.EqualTolerance(KilometersPerSecondCubedInOneMeterPerSecondCubed, (double)kilometerpersecondcubedQuantity.Value, KilometersPerSecondCubedTolerance);
            Assert.Equal(JerkUnit.KilometerPerSecondCubed, kilometerpersecondcubedQuantity.Unit);

            var knotperhoursquaredQuantity = meterpersecondcubed.ToUnit(JerkUnit.KnotPerHourSquared);
            AssertEx.EqualTolerance(KnotsPerHourSquaredInOneMeterPerSecondCubed, (double)knotperhoursquaredQuantity.Value, KnotsPerHourSquaredTolerance);
            Assert.Equal(JerkUnit.KnotPerHourSquared, knotperhoursquaredQuantity.Unit);

            var knotperminutesquaredQuantity = meterpersecondcubed.ToUnit(JerkUnit.KnotPerMinuteSquared);
            AssertEx.EqualTolerance(KnotsPerMinuteSquaredInOneMeterPerSecondCubed, (double)knotperminutesquaredQuantity.Value, KnotsPerMinuteSquaredTolerance);
            Assert.Equal(JerkUnit.KnotPerMinuteSquared, knotperminutesquaredQuantity.Unit);

            var knotpersecondsquaredQuantity = meterpersecondcubed.ToUnit(JerkUnit.KnotPerSecondSquared);
            AssertEx.EqualTolerance(KnotsPerSecondSquaredInOneMeterPerSecondCubed, (double)knotpersecondsquaredQuantity.Value, KnotsPerSecondSquaredTolerance);
            Assert.Equal(JerkUnit.KnotPerSecondSquared, knotpersecondsquaredQuantity.Unit);

            var meterpersecondcubedQuantity = meterpersecondcubed.ToUnit(JerkUnit.MeterPerSecondCubed);
            AssertEx.EqualTolerance(MetersPerSecondCubedInOneMeterPerSecondCubed, (double)meterpersecondcubedQuantity.Value, MetersPerSecondCubedTolerance);
            Assert.Equal(JerkUnit.MeterPerSecondCubed, meterpersecondcubedQuantity.Unit);

            var micrometerpersecondcubedQuantity = meterpersecondcubed.ToUnit(JerkUnit.MicrometerPerSecondCubed);
            AssertEx.EqualTolerance(MicrometersPerSecondCubedInOneMeterPerSecondCubed, (double)micrometerpersecondcubedQuantity.Value, MicrometersPerSecondCubedTolerance);
            Assert.Equal(JerkUnit.MicrometerPerSecondCubed, micrometerpersecondcubedQuantity.Unit);

            var millimeterpersecondcubedQuantity = meterpersecondcubed.ToUnit(JerkUnit.MillimeterPerSecondCubed);
            AssertEx.EqualTolerance(MillimetersPerSecondCubedInOneMeterPerSecondCubed, (double)millimeterpersecondcubedQuantity.Value, MillimetersPerSecondCubedTolerance);
            Assert.Equal(JerkUnit.MillimeterPerSecondCubed, millimeterpersecondcubedQuantity.Unit);

            var nanometerpersecondcubedQuantity = meterpersecondcubed.ToUnit(JerkUnit.NanometerPerSecondCubed);
            AssertEx.EqualTolerance(NanometersPerSecondCubedInOneMeterPerSecondCubed, (double)nanometerpersecondcubedQuantity.Value, NanometersPerSecondCubedTolerance);
            Assert.Equal(JerkUnit.NanometerPerSecondCubed, nanometerpersecondcubedQuantity.Unit);

            var standardgravitypersecondQuantity = meterpersecondcubed.ToUnit(JerkUnit.StandardGravityPerSecond);
            AssertEx.EqualTolerance(StandardGravityPerSecondInOneMeterPerSecondCubed, (double)standardgravitypersecondQuantity.Value, StandardGravityPerSecondTolerance);
            Assert.Equal(JerkUnit.StandardGravityPerSecond, standardgravitypersecondQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            AssertEx.EqualTolerance(1, Jerk.FromCentimetersPerSecondCubed(meterpersecondcubed.CentimetersPerSecondCubed).MetersPerSecondCubed, CentimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromDecimetersPerSecondCubed(meterpersecondcubed.DecimetersPerSecondCubed).MetersPerSecondCubed, DecimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromFeetPerSecondCubed(meterpersecondcubed.FeetPerSecondCubed).MetersPerSecondCubed, FeetPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromInchesPerSecondCubed(meterpersecondcubed.InchesPerSecondCubed).MetersPerSecondCubed, InchesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromKilometersPerSecondCubed(meterpersecondcubed.KilometersPerSecondCubed).MetersPerSecondCubed, KilometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromKnotsPerHourSquared(meterpersecondcubed.KnotsPerHourSquared).MetersPerSecondCubed, KnotsPerHourSquaredTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromKnotsPerMinuteSquared(meterpersecondcubed.KnotsPerMinuteSquared).MetersPerSecondCubed, KnotsPerMinuteSquaredTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromKnotsPerSecondSquared(meterpersecondcubed.KnotsPerSecondSquared).MetersPerSecondCubed, KnotsPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromMetersPerSecondCubed(meterpersecondcubed.MetersPerSecondCubed).MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromMicrometersPerSecondCubed(meterpersecondcubed.MicrometersPerSecondCubed).MetersPerSecondCubed, MicrometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromMillimetersPerSecondCubed(meterpersecondcubed.MillimetersPerSecondCubed).MetersPerSecondCubed, MillimetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromNanometersPerSecondCubed(meterpersecondcubed.NanometersPerSecondCubed).MetersPerSecondCubed, NanometersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, Jerk.FromStandardGravityPerSecond(meterpersecondcubed.StandardGravityPerSecond).MetersPerSecondCubed, StandardGravityPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Jerk v = Jerk.FromMetersPerSecondCubed(1);
            AssertEx.EqualTolerance(-1, -v.MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(2, (Jerk.FromMetersPerSecondCubed(3)-v).MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(2, (v + v).MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(10, (v*10).MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(10, (10*v).MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(2, (Jerk.FromMetersPerSecondCubed(10)/5).MetersPerSecondCubed, MetersPerSecondCubedTolerance);
            AssertEx.EqualTolerance(2, Jerk.FromMetersPerSecondCubed(10)/Jerk.FromMetersPerSecondCubed(5), MetersPerSecondCubedTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Jerk oneMeterPerSecondCubed = Jerk.FromMetersPerSecondCubed(1);
            Jerk twoMetersPerSecondCubed = Jerk.FromMetersPerSecondCubed(2);

            Assert.True(oneMeterPerSecondCubed < twoMetersPerSecondCubed);
            Assert.True(oneMeterPerSecondCubed <= twoMetersPerSecondCubed);
            Assert.True(twoMetersPerSecondCubed > oneMeterPerSecondCubed);
            Assert.True(twoMetersPerSecondCubed >= oneMeterPerSecondCubed);

            Assert.False(oneMeterPerSecondCubed > twoMetersPerSecondCubed);
            Assert.False(oneMeterPerSecondCubed >= twoMetersPerSecondCubed);
            Assert.False(twoMetersPerSecondCubed < oneMeterPerSecondCubed);
            Assert.False(twoMetersPerSecondCubed <= oneMeterPerSecondCubed);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.Equal(0, meterpersecondcubed.CompareTo(meterpersecondcubed));
            Assert.True(meterpersecondcubed.CompareTo(Jerk.Zero) > 0);
            Assert.True(Jerk.Zero.CompareTo(meterpersecondcubed) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.Throws<ArgumentException>(() => meterpersecondcubed.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.Throws<ArgumentNullException>(() => meterpersecondcubed.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            Jerk a = Jerk.FromMetersPerSecondCubed(1);
            Jerk b = Jerk.FromMetersPerSecondCubed(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            Jerk v = Jerk.FromMetersPerSecondCubed(1);
            Assert.True(v.Equals(Jerk.FromMetersPerSecondCubed(1), Jerk.FromMetersPerSecondCubed(MetersPerSecondCubedTolerance)));
            Assert.False(v.Equals(Jerk.Zero, Jerk.FromMetersPerSecondCubed(MetersPerSecondCubedTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.False(meterpersecondcubed.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Jerk meterpersecondcubed = Jerk.FromMetersPerSecondCubed(1);
            Assert.False(meterpersecondcubed.Equals(null));
        }
    }
}
