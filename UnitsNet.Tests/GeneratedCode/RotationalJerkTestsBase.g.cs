//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RotationalJerk.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RotationalJerkTestsBase
    {
        protected abstract double DegreesPerSecondCubedInOneRadianPerSecondCubed { get; }
        protected abstract double RadiansPerSecondCubedInOneRadianPerSecondCubed { get; }
        protected abstract double RevolutionsPerMinutePerSecondSquaredInOneRadianPerSecondCubed { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DegreesPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double RadiansPerSecondCubedTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsPerMinutePerSecondSquaredTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void RadianPerSecondCubedToRotationalJerkUnits()
        {
            RotationalJerk radianpersecondcubed = RotationalJerk.FromRadiansPerSecondCubed(1);
            AssertEx.EqualTolerance(DegreesPerSecondCubedInOneRadianPerSecondCubed, radianpersecondcubed.DegreesPerSecondCubed, DegreesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondCubedInOneRadianPerSecondCubed, radianpersecondcubed.RadiansPerSecondCubed, RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(RevolutionsPerMinutePerSecondSquaredInOneRadianPerSecondCubed, radianpersecondcubed.RevolutionsPerMinutePerSecondSquared, RevolutionsPerMinutePerSecondSquaredTolerance);
        }

        [Fact]
        public void FromValueAndUnit()
        {
            AssertEx.EqualTolerance(1, RotationalJerk.From(1, RotationalJerkUnit.DegreePerSecondCubed).DegreesPerSecondCubed, DegreesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, RotationalJerk.From(1, RotationalJerkUnit.RadianPerSecondCubed).RadiansPerSecondCubed, RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, RotationalJerk.From(1, RotationalJerkUnit.RevolutionPerMinutePerSecondSquared).RevolutionsPerMinutePerSecondSquared, RevolutionsPerMinutePerSecondSquaredTolerance);
        }

        [Fact]
        public void As()
        {
            var radianpersecondcubed = RotationalJerk.FromRadiansPerSecondCubed(1);
            AssertEx.EqualTolerance(DegreesPerSecondCubedInOneRadianPerSecondCubed, radianpersecondcubed.As(RotationalJerkUnit.DegreePerSecondCubed), DegreesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondCubedInOneRadianPerSecondCubed, radianpersecondcubed.As(RotationalJerkUnit.RadianPerSecondCubed), RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(RevolutionsPerMinutePerSecondSquaredInOneRadianPerSecondCubed, radianpersecondcubed.As(RotationalJerkUnit.RevolutionPerMinutePerSecondSquared), RevolutionsPerMinutePerSecondSquaredTolerance);
        }

        [Fact]
        public void ToUnit()
        {
            var radianpersecondcubed = RotationalJerk.FromRadiansPerSecondCubed(1);

            var degreepersecondcubedQuantity = radianpersecondcubed.ToUnit(RotationalJerkUnit.DegreePerSecondCubed);
            AssertEx.EqualTolerance(DegreesPerSecondCubedInOneRadianPerSecondCubed, (double)degreepersecondcubedQuantity.Value, DegreesPerSecondCubedTolerance);
            Assert.Equal(RotationalJerkUnit.DegreePerSecondCubed, degreepersecondcubedQuantity.Unit);

            var radianpersecondcubedQuantity = radianpersecondcubed.ToUnit(RotationalJerkUnit.RadianPerSecondCubed);
            AssertEx.EqualTolerance(RadiansPerSecondCubedInOneRadianPerSecondCubed, (double)radianpersecondcubedQuantity.Value, RadiansPerSecondCubedTolerance);
            Assert.Equal(RotationalJerkUnit.RadianPerSecondCubed, radianpersecondcubedQuantity.Unit);

            var revolutionperminutepersecondsquaredQuantity = radianpersecondcubed.ToUnit(RotationalJerkUnit.RevolutionPerMinutePerSecondSquared);
            AssertEx.EqualTolerance(RevolutionsPerMinutePerSecondSquaredInOneRadianPerSecondCubed, (double)revolutionperminutepersecondsquaredQuantity.Value, RevolutionsPerMinutePerSecondSquaredTolerance);
            Assert.Equal(RotationalJerkUnit.RevolutionPerMinutePerSecondSquared, revolutionperminutepersecondsquaredQuantity.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RotationalJerk radianpersecondcubed = RotationalJerk.FromRadiansPerSecondCubed(1);
            AssertEx.EqualTolerance(1, RotationalJerk.FromDegreesPerSecondCubed(radianpersecondcubed.DegreesPerSecondCubed).RadiansPerSecondCubed, DegreesPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, RotationalJerk.FromRadiansPerSecondCubed(radianpersecondcubed.RadiansPerSecondCubed).RadiansPerSecondCubed, RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(1, RotationalJerk.FromRevolutionsPerMinutePerSecondSquared(radianpersecondcubed.RevolutionsPerMinutePerSecondSquared).RadiansPerSecondCubed, RevolutionsPerMinutePerSecondSquaredTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RotationalJerk v = RotationalJerk.FromRadiansPerSecondCubed(1);
            AssertEx.EqualTolerance(-1, -v.RadiansPerSecondCubed, RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(2, (RotationalJerk.FromRadiansPerSecondCubed(3)-v).RadiansPerSecondCubed, RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(2, (v + v).RadiansPerSecondCubed, RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(10, (v*10).RadiansPerSecondCubed, RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(10, (10*v).RadiansPerSecondCubed, RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(2, (RotationalJerk.FromRadiansPerSecondCubed(10)/5).RadiansPerSecondCubed, RadiansPerSecondCubedTolerance);
            AssertEx.EqualTolerance(2, RotationalJerk.FromRadiansPerSecondCubed(10)/RotationalJerk.FromRadiansPerSecondCubed(5), RadiansPerSecondCubedTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            RotationalJerk oneRadianPerSecondCubed = RotationalJerk.FromRadiansPerSecondCubed(1);
            RotationalJerk twoRadiansPerSecondCubed = RotationalJerk.FromRadiansPerSecondCubed(2);

            Assert.True(oneRadianPerSecondCubed < twoRadiansPerSecondCubed);
            Assert.True(oneRadianPerSecondCubed <= twoRadiansPerSecondCubed);
            Assert.True(twoRadiansPerSecondCubed > oneRadianPerSecondCubed);
            Assert.True(twoRadiansPerSecondCubed >= oneRadianPerSecondCubed);

            Assert.False(oneRadianPerSecondCubed > twoRadiansPerSecondCubed);
            Assert.False(oneRadianPerSecondCubed >= twoRadiansPerSecondCubed);
            Assert.False(twoRadiansPerSecondCubed < oneRadianPerSecondCubed);
            Assert.False(twoRadiansPerSecondCubed <= oneRadianPerSecondCubed);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RotationalJerk radianpersecondcubed = RotationalJerk.FromRadiansPerSecondCubed(1);
            Assert.Equal(0, radianpersecondcubed.CompareTo(radianpersecondcubed));
            Assert.True(radianpersecondcubed.CompareTo(RotationalJerk.Zero) > 0);
            Assert.True(RotationalJerk.Zero.CompareTo(radianpersecondcubed) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RotationalJerk radianpersecondcubed = RotationalJerk.FromRadiansPerSecondCubed(1);
            Assert.Throws<ArgumentException>(() => radianpersecondcubed.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RotationalJerk radianpersecondcubed = RotationalJerk.FromRadiansPerSecondCubed(1);
            Assert.Throws<ArgumentNullException>(() => radianpersecondcubed.CompareTo(null));
        }


        [Fact]
        public void EqualityOperators()
        {
            RotationalJerk a = RotationalJerk.FromRadiansPerSecondCubed(1);
            RotationalJerk b = RotationalJerk.FromRadiansPerSecondCubed(2);

// ReSharper disable EqualExpressionComparison
            Assert.True(a == a);
            Assert.True(a != b);

            Assert.False(a == b);
            Assert.False(a != a);
// ReSharper restore EqualExpressionComparison
        }

        [Fact]
        public void EqualsIsImplemented()
        {
            RotationalJerk v = RotationalJerk.FromRadiansPerSecondCubed(1);
            Assert.True(v.Equals(RotationalJerk.FromRadiansPerSecondCubed(1), RotationalJerk.FromRadiansPerSecondCubed(RadiansPerSecondCubedTolerance)));
            Assert.False(v.Equals(RotationalJerk.Zero, RotationalJerk.FromRadiansPerSecondCubed(RadiansPerSecondCubedTolerance)));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RotationalJerk radianpersecondcubed = RotationalJerk.FromRadiansPerSecondCubed(1);
            Assert.False(radianpersecondcubed.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RotationalJerk radianpersecondcubed = RotationalJerk.FromRadiansPerSecondCubed(1);
            Assert.False(radianpersecondcubed.Equals(null));
        }
    }
}
